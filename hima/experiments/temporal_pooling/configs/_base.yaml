dataset:
  synthetic_sequences:
    base:
      _type_: ds.synthetic_sequences
      global_config: ???
      seed: ???
      # sequences
      n_sequences: ???
      sequence_length: ???
      sequence_similarity: ???
      sequence_similarity_std: ???
      # elements
      alphabet_size: ???
      encoder: ???

    # TODO: high similarity
    similar:
      _base_: base
      sequence_similarity: ???
      sequence_similarity_std: ???

    # mid similarity
    general:
      _base_: base
      sequence_similarity: 0.35
      sequence_similarity_std: 0.35

    # TODO: low similarity
    dissimilar:
      _base_: base
      sequence_similarity: ???
      sequence_similarity_std: ???

encoder:
  bucket:
    _type_: encoder.int_bucket
    n_values: ???
    bucket_size: ???

  random:
    base:
      _type_: encoder.int_random
      n_values: ???
      space_compression: ???
      active_size: ???
      sds: ???
      seed: ???
    flexible_sds:
      _base_: base
      active_size: ???
      space_compression: ???
      sds: ...
    fixed_sds:
      _base_: base
      space_compression: ...
      active_size: ...
      sds: ???

block:
  # you can omit specifying this common base as _base_.
  # it is added just for clarity that each block has these attributes
  base:
    id: ???
    name: ???

spatial_pooler:
  default:
    _type_: sp.vectorized
    seed: ???
    # input
    feedforward_sds: ???
    initial_rf_sparsity: 0.25
    max_rf_sparsity: 0.1
    max_rf_to_input_ratio: 2.5
    # output
    output_sds: ???
    # learning
    min_overlap_for_activation: 3
    learning_rate: 0.1
    global_inhibition_strength: 0.01
    newborn_pruning_cycle: 5
    newborn_pruning_stages: 3
    boosting_k: 2.0
