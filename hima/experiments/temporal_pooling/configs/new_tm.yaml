_type_: stp_experiment.tm_sequence_learning
project: stp.new_tm.test_text
log: True    # wandb logging, use 'dry' for dummy do-nothing logging to test metrics collection

seed: 1313
reset_tm: False
iterate:
  _base_: iterate_setups.small_10k

log_schedule:
  # add emit dict to skip logging steps/seq_started
  epoch: 1
  repeat: 5

model:
  global_config: ???
  seed: ???
  external:
    - step
    - step_finished
    - sequence_id
    - sequence_finished
    - epoch
    - epoch_finished
    - tracking_enabled
    - learn
  pipeline:
    - predict input w/ prior belief:
      - TM.predict()
      - TM.predicted_cells.sdr -> decoder.feedforward.sdr
      - decoder.decode()
      - decoder.output.sdr -> input_prediction.sdr
    - embed input:
#      - input.sdr -> SE.feedforward.sdr
#      - SE.compute()
#      - SE.output.sdr -> embed_input.sdr
      - input.sdr -> embed_input.sdr
    - compute TM:
      - embed_input.sdr -> TM.feedforward.sdr
      - TM.compute()
      - TM.compare_with_prediction()
      - TM.active_cells.sdr -> TM.state.sdr
    - learn decoder:
      - embed_input.sdr -> decoder.feedback.sdr
      - decoder.learn()
    - predict input w/ posterior belief:
      - TM.state.sdr -> decoder.feedforward.sdr
      - decoder.decode()
      - decoder.output.sdr -> input_posterior_prediction.sdr
      - decoder.learn()

  track:
    # SDR Tracking
    - name: input.sequence.sdr
      tracker: trackers.sdr
      on:
        sdr_updated: input.sdr
        sequence_finished: sequence_finished
    - name: input.prediction.prior.sdr
      tracker: trackers.sdr
      on:
        sdr_updated: input_prediction.sdr
        sequence_finished: epoch_finished
    - name: input.prediction.posterior.sdr
      tracker: trackers.sdr
      on:
        sdr_updated: input_posterior_prediction.sdr
        sequence_finished: epoch_finished

    # SDR Prediction quality tracking
    - name: input.prediction.prior
      tracker: trackers.sdr_prediction
      on:
        sdr_predicted: input_prediction.sdr
        sdr_observed: embed_input.sdr
        both_known: embed_input.sdr
        sequence_finished: sequence_finished
    - name: input.prediction.posterior
      tracker: trackers.sdr_prediction
      on:
        sdr_predicted: input_posterior_prediction.sdr
        sdr_observed: embed_input.sdr
        both_known: input_posterior_prediction.sdr
        sequence_finished: sequence_finished
    - name: state_L1.prediction
      tracker: trackers.sdr_prediction
      on:
        sdr_predicted: TM.predicted_cells.sdr
        sdr_observed: TM.active_cells.sdr
        both_known: TM.active_cells.sdr
        sequence_finished: sequence_finished
    - name: state_L2.prediction
      tracker: trackers.sdr_prediction
      on:
        sdr_predicted: TM2.predicted_cells.sdr
        sdr_observed: TM2.active_cells.sdr
        both_known: TM2.active_cells.sdr
        sequence_finished: sequence_finished

    # SP Tracking
    - name: state_L1.prior.sp
      tracker: trackers.sp_concat
      on:
        sp_computed: TM.predicted_cells.sdr
        sequence_finished: sequence_finished
    - name: state_L1.posterior.sp
      tracker: trackers.sp_concat
      on:
        sp_computed: TM.active_cells.sdr
        sequence_finished: sequence_finished
    - name: state_L2.prior.sp
      tracker: trackers.sp_concat
      on:
        sp_computed: TM2.predicted_cells.sdr
        sequence_finished: sequence_finished

#track_streams:
#  input.sdr:
#    - cross.online.el
#  SE.output.sdr:
#    - cross.online.el
#  TM.predicted_cells.sdr:
#    - cross.online.el
#  TM2.predicted_cells.sdr:
#    - cross.online.el
#  input_prediction.sdr:
#    - cross.online.el
#  input_posterior_prediction.sdr:
#    - cross.online.el

diff_stats:
  online_el:
    - input.sdr/epoch/sim_mx_on_el
    - SE.output.sdr/epoch/sim_mx_on_el
    - TM.predicted_cells.sdr/epoch/sim_mx_on_el
    - TM2.predicted_cells.sdr/epoch/sim_mx_on_el
    - input_prediction.sdr/epoch/sim_mx_on_el
    - input_posterior_prediction.sdr/epoch/sim_mx_on_el

data: datas.text_sequences

datas:
  synthetic_sequences:
    _base_: $_base.dataset.synthetic_sequences.general
    alphabet_size: 200
    encoder:
      _base_: $_base.encoder.random.fixed_sds
      sds: [ 600, 18 ]
  dvc_sequences:
    _base_: $_base.dataset.dvc_sequences
    sequential: True
  code_sequences:
    _base_: $_base.dataset.text_sequences
    encoder:
      _base_: $_base.encoder.random.fixed_sds
      sds: [ 600, 18 ]
    sequential: True
  text_sequences:
    _base_: $_base.dataset.text_sequences
    filepath: ~/data/text/text8.txt
    max_size_hint: 1_000_000
    encoder:
      _base_: $_base.encoder.random.fixed_sds
      sds: [ 200, 10 ]
    sequential: True


models:
  +SE: $_base.models.+SE
  LSTM: $_base.models.LSTM
  Baseline TM: $_base.models_new.Baseline TM

  STM1:
    - predict input w/ prior belief:
        - TM.predict()
        - TM.predicted_cells.sdr -> decoder.feedforward.sdr
        - decoder.decode()
        - decoder.output.sdr -> input_prediction.sdr
    - embed input:
#        - input.sdr -> SE.feedforward.sdr
#        - SE.compute()
#        - SE.output.sdr -> embed_input.sdr
        - input.sdr -> embed_input.sdr
    - compute TM:
        - embed_input.sdr -> TM.feedforward.sdr
        - TM.compute()
        - TM.active_cells.sdr -> TM.state.sdr
    - learn decoder:
        - embed_input.sdr -> decoder.feedback.sdr
        - decoder.learn()
    - predict input w/ posterior belief:
        - TM.state.sdr -> decoder.feedforward.sdr
        - decoder.decode()
        - decoder.output.sdr -> input_posterior_prediction.sdr
#        - decoder.learn()

  STM1_att:
    - predict input w/ prior belief on 1st iter than bootstrap using prediction as input:
        - TM.reset_ff()
        - repeat: 2
          do:
            - TM.predict()
            - TM.predicted_cells.sdr -> decoder.feedforward.sdr
            - decoder.decode()
            - decoder.output.sdr -> TM.feedforward.sdr
    - decoder.output.sdr -> input_prediction.sdr
    - embed input:
        - input.sdr -> embed_input.sdr
    - compute TM:
        - embed_input.sdr -> TM.feedforward.sdr
        - TM.compute()
        - TM.active_cells.sdr -> TM.state.sdr
    - learn decoder:
        - embed_input.sdr -> decoder.feedback.sdr
        - decoder.learn()
    - predict input w/ posterior belief:
        - TM.state.sdr -> decoder.feedforward.sdr
        - decoder.decode()
        - decoder.output.sdr -> input_posterior_prediction.sdr

  STM2:
    - predict input w/ prior belief:
        - TM2.predict()
        - TM2.predicted_cells.sdr -> concat.feedforward_#2.sdr
        - TM.predict()
        - TM.predicted_cells.sdr -> concat.feedforward_#1.sdr
        - concat.compute()
        - concat.output.sdr -> decoder.feedforward.sdr
        - decoder.decode()
        - decoder.output.sdr -> input_prediction.sdr
    - embed input:
        - input.sdr -> embed_input.sdr
    - compute TM^1:
        - embed_input.sdr -> TM.feedforward.sdr
        - TM.compute()
        - TM.compare_with_prediction()
        - TM.active_cells.sdr -> TM.state.sdr
    - compute TM^2:
        - TM.active_cells.sdr -> TM2.feedforward.sdr
        - TM2.compute()
        - TM2.compare_with_prediction()
        - TM2.active_cells.sdr -> TM2.state.sdr
    - learn decoder:
        - embed_input.sdr -> decoder.feedback.sdr
        - decoder.learn()
    - predict input w/ posterior belief:
        - TM.state.sdr -> concat.feedforward_#1.sdr
        - concat.compute()
        - concat.output.sdr -> decoder.feedforward.sdr
        - decoder.decode()
        - decoder.output.sdr -> input_posterior_prediction.sdr
#        - decoder.learn()

  STM2_att:
    - predict input w/ prior belief on 1st iter than bootstrap using prediction as input:
        - TM.reset_ff()
        - repeat: 2
          do:
            - TM2.predict()
            - TM2.predicted_cells.sdr -> concat.feedforward_#2.sdr
            - TM.predict()
            - TM.predicted_cells.sdr -> concat.feedforward_#1.sdr
            - decoder.decode()
            - decoder.output.sdr -> TM.feedforward.sdr
            - concat.compute()
            - concat.output.sdr -> decoder.feedforward.sdr
            - decoder.decode()
            - decoder.output.sdr -> input_prediction.sdr
    - decoder.output.sdr -> input_prediction.sdr
    - embed input:
        - input.sdr -> embed_input.sdr
    - compute TM^1:
        - embed_input.sdr -> TM.feedforward.sdr
        - TM.compute()
        - TM.compare_with_prediction()
        - TM.active_cells.sdr -> TM.state.sdr
    - compute TM^2:
        - TM.active_cells.sdr -> TM2.feedforward.sdr
        - TM2.compute()
        - TM2.compare_with_prediction()
        - TM2.active_cells.sdr -> TM2.state.sdr
    - learn decoder:
        - embed_input.sdr -> decoder.feedback.sdr
        - decoder.learn()
    - predict input w/ posterior belief:
        - TM.state.sdr -> concat.feedforward_#1.sdr
        - concat.compute()
        - concat.output.sdr -> decoder.feedforward.sdr
        - decoder.decode()
        - decoder.output.sdr -> input_posterior_prediction.sdr
#        - decoder.learn()

SE:
  sp:
    _base_: $_base.spatial_pooler.default
#    _type_: sp.vectorized
    _type_: sp.float
#    _type_: sp.sdrr
    initial_rf_to_input_ratio: 12.0
    target_rf_to_input_ratio: 0.5
    learning_rate: 0.02
    newborn_pruning_cycle: 3.0
    newborn_pruning_stages: 20
    newborn_pruning_mode: powerlaw
    prune_grow_cycle: 100.0
    adapt_to_ff_sparsity: False
    boosting_k: 0.5
  stp:
    _base_: $_base.spatial_temporal_pooler.default
    max_pooling_window: 4
    reset_potential_on_activation: True
    initial_rf_to_input_ratio: 8.0
    max_rf_to_input_ratio: 1.5
    learning_rate: 0.001
    global_inhibition_strength: 0.2
    newborn_pruning_cycle: 2.0
    newborn_pruning_stages: 10
    prune_grow_cycle: 10.0
    adapt_to_ff_sparsity: False

TM:
  tm:
    _base_: $_base.temporal_memory.default
    cells_per_column: 8
    activation_threshold_basal: .9
    learning_threshold_basal: .7
    permanence_increment_basal: 0.1
    permanence_decrement_basal: 0.012
    predicted_segment_decrement_basal: 0.004
    max_synapses_per_segment_basal: 2.1
    max_segments_per_cell_basal: 16
  tm_new:
    _base_: $_base.spatial_pooler.default
    _type_: sp.float
#    _type_: sp.sdrr
#    _type_: sp.sdrr
    initial_rf_to_input_ratio: 100.0
    initial_max_rf_sparsity: 0.5
    target_rf_to_input_ratio: 0.75
    learning_rate: 0.02
    newborn_pruning_cycle: 20.0
    newborn_pruning_stages: 20
    newborn_pruning_mode: powerlaw
    prune_grow_cycle: 100.0
    adapt_to_ff_sparsity: False
    boosting_k: 0.2
    output_mode: rate
#    learning_algo: new
  tm_new2:
    _base_: $_base.spatial_pooler.default_layer
    initial_rf_to_input_ratio: 5.0
    initial_max_rf_sparsity: 0.1
    target_rf_to_input_ratio: 0.75
    learning_rate: 0.01
    newborn_pruning_cycle: 10.0
    newborn_pruning_stages: 5
    newborn_pruning_mode: powerlaw
    prune_grow_cycle: 20.0
    adapt_to_ff_sparsity: False
    boosting_k: 0.25
    output_mode: binary
    learning_algo: new
    normalize_rates: true
    sample_winners: false
  lstm:
    _type_: tm.lstm
    seed: ???
    input_size: ???
    hidden_size: 400
    lr: 0.002

blocks:
  concat:
    _type_: block.concatenator
  decoder:
    _type_: block.decoder
    decoder:
      _base_: $_base.decoder.mlp
  SE:
    _type_: block.sp
    _base_: $_base.blocks.sp_like
    output_sds: [600, 18]
    sp:
      _base_: SE.sp
  TM:
    _type_: block.tm
    _base_: $_base.blocks.tm_like
    tm:
      _base_: TM.tm
  TM2:
    _type_: block.tm
    _base_: $_base.blocks.tm_like
    tm:
      _base_: TM.tm

stats_and_metrics:
  mae_normalization: no
  symmetrical_similarity: False
  distribution_metrics: pmf
  online_similarity_decay: 1.
  pmf_decay: 1.
  loss_normalization: False
  loss_layer_discount: 0.75

iterate_setups:
  small_10k:
    epochs: 10
    resample_frequency: 1
    sequences: [10, 1]
    elements: 100
  default_100k:
    epochs: 50
    resample_frequency: 1
    sequences: [10, 1]
    elements: 200
  default_5x20k:
    epochs: 50
    resample_frequency: 5
    sequences: [10, 1]
    elements: 200
  large_400k:
    epochs: 100
    resample_frequency: 1
    sequences: [10, 1]
    elements: 400
  large_5x80k:
    epochs: 100
    resample_frequency: 5
    sequences: [10, 1]
    elements: 400

trackers:
  sdr:
    _type_: tracker.sdr
    on: ???
    step_flush_schedule: 100
  tm:
    _type_: tracker.tm
    on: ???
  sdr_prediction:
    _type_: tracker.sdr_prediction
    on: ???
    step_flush_schedule: 100
  sp:
    _type_: tracker.sp
    on: ???
    step_flush_schedule: 100
    track_split: False
  sp_concat:
    _base_: sp
    track_split: True
    potentials_quantile: 0.3

wandb_init:
  _base_: $_base.wandb_init
