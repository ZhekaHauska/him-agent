_type_: stp_experiment.synthetic_sequences
project: stp.test_temporal_pooling
log: True    # wandb logging, use 'dry' for dummy do-nothing logging to test metrics collection

seed: 42
iterate:
  epochs: 100
  resample_frequency: 5
  sequences: [20, 1]
  elements: 200

model:
  global_config: ???
  external:
    - step
    - step_finished
    - sequence_id
    - sequence_finished
    - epoch
    - epoch_finished
    - tracking_enabled
  pipeline:
    - input.sdr -> STE.feedforward.sdr
    - STE.compute()
    - STE.output.sdr -> TM.feedforward.sdr
    - compute TM:
      - TM.predict()
      - TM.set_predicted_cells()
      - TM.activate()
    - TM.correctly_predicted_cells.sdr -> output.sdr
  track:
    - name: all_input
      tracker: trackers.sdr
      stream: input.sdr
      on:
        sequence_started: epoch
        sdr_updated: input.sdr
        sequence_finished: epoch_finished
    - name: seq_input
      tracker: trackers.sdr
      stream: input.sdr
      on:
        sequence_started: sequence_id
        sdr_updated: input.sdr
        sequence_finished: sequence_finished

trackers:
  sdr:
    _type_: tracker.sdr
    sds: ???

track_streams:
#  input.sdr:
#    - cross.online.el
  SE.output.sdr:
    - sdr
#    - cross.online.el
  SA.output.sdr:
    - sdr
#    - cross.online.el
  TM.correctly_predicted_cells.sdr:
    - sdr
#    - cross.online.el

diff_stats:
  online_el:
    - gen.output/epoch/sim_mx_on_el
    - SE.output/epoch/sim_mx_on_el
    - SA.output/epoch/sim_mx_on_el
    - TM.correctly_predicted_cells/epoch/sim_mx_on_el

log_schedule:
  epoch: 5
  repeat: 5

#data: datas.synthetic_sequences
data:
  _type_: ds.dvc_sequences
  filepath: /Users/kuderov/data/outdoors_walking/sdrs.pkl
  n_sequences: ???
  sequence_length: ???


datas:
  synthetic_sequences:
    _base_: $_base.dataset.synthetic_sequences.general
    alphabet_size: 200
    encoder:
      _base_: $_base.encoder.random.fixed_sds
      sds: [ 500, 10 ]

models:
  +STE+AA:
    - input.sdr -> STE.feedforward.sdr
    - STE.compute()
    - TM.predict()
    - activate + predict by AA:
      - TM.predicted_cells.sdr -> AA.feedforward.sdr
      - AA.set_active_columns()
      - AA.predict()
      - AA.set_predicted_cells()
    - correct TM predicted cells:
      - AA.predicted_cells.sdr -> TM.predicted_cells.sdr
      - TM.set_predicted_cells()
    - learn TM:
      - STE.output.sdr -> TM.feedforward.sdr
      - TM.activate()
    - learn AA:
      - TM.active_cells.sdr -> AA.feedforward.sdr
      - AA.activate()
    - TM.correctly_predicted_cells.sdr -> output.sdr
  +STE:
    - input.sdr -> STE.feedforward.sdr
    - STE.compute()
    - STE.output.sdr -> TM.feedforward.sdr
    - compute TM:
        - TM.predict()
        - TM.set_predicted_cells()
        - TM.activate()
    - TM.correctly_predicted_cells.sdr -> output.sdr
  +SE+AA:
    - input.sdr -> SE.feedforward.sdr
    - SE.compute()
    - TM.predict()
    - activate + predict by AA:
      - TM.predicted_cells.sdr -> AA.feedforward.sdr
      - AA.set_active_columns()
      - AA.predict()
      - AA.set_predicted_cells()
    - correct TM predicted cells:
      - AA.predicted_cells.sdr -> TM.predicted_cells.sdr
      - TM.set_predicted_cells()
    - learn TM:
      - SE.output.sdr -> TM.feedforward.sdr
      - TM.activate()
    - learn AA:
      - TM.active_cells.sdr -> AA.feedforward.sdr
      - AA.activate()
    - TM.correctly_predicted_cells.sdr -> output.sdr
  +AA:
    - TM.predict()
    - activate + predict by AA:
      - TM.predicted_cells.sdr -> AA.feedforward.sdr
      - AA.set_active_columns()
      - AA.predict()
      - AA.set_predicted_cells()
    - correct TM predicted cells:
      - AA.predicted_cells.sdr -> TM.predicted_cells.sdr
      - TM.set_predicted_cells()
    - learn TM:
      - input.sdr -> TM.feedforward.sdr
      - TM.activate()
    - learn AA:
      - TM.active_cells.sdr -> AA.feedforward.sdr
      - AA.activate()
    - TM.correctly_predicted_cells.sdr -> output.sdr
  +SE:
    - input.sdr -> SE.feedforward.sdr
    - SE.compute()
    - SE.output.sdr -> TM.feedforward.sdr
    - compute TM:
      - TM.predict()
      - TM.set_predicted_cells()
      - TM.activate()
    - TM.correctly_predicted_cells.sdr -> output.sdr
  Baseline TM:
    - input.sdr -> TM.feedforward.sdr
    - compute TM:
      - TM.predict()
      - TM.set_predicted_cells()
      - TM.activate()
    - TM.correctly_predicted_cells.sdr -> output.sdr

blocks:
  concat:
    _type_: block.concatenator
  SE:
    _type_: block.sp
    output_sds: [500, 10]
    sp:
      _base_: $_base.spatial_pooler.default
      initial_rf_to_input_ratio: 8.0
      max_rf_to_input_ratio: 1.5
      learning_rate: 0.02
      global_inhibition_strength: 0.2
      newborn_pruning_cycle: 2.0
      newborn_pruning_stages: 6
      prune_grow_cycle: 10.0
      adapt_to_ff_sparsity: False
      boosting_k: 0.5
  STE:
    _type_: block.sp
    output_sds: [500, 10]
    sp:
      _type_: stp.base
      _base_: $_base.spatial_pooler.default
      max_pooling_window: 4
      reset_potential_on_activation: True
      initial_rf_to_input_ratio: 8.0
      max_rf_to_input_ratio: 1.5
      learning_rate: 0.02
      global_inhibition_strength: 0.2
      newborn_pruning_cycle: 2.0
      newborn_pruning_stages: 6
      prune_grow_cycle: 10.0
      adapt_to_ff_sparsity: False
      boosting_k: 0.5
  SA:
    _type_: block.sp
    output_sds: ??? #[500, 10]
    sp:
      _base_: $_base.spatial_pooler.default
      initial_rf_to_input_ratio: 8.0  #12?
      max_rf_to_input_ratio: 1.25
      learning_rate: 0.02
      global_inhibition_strength: 0.2
      newborn_pruning_cycle: 1.0
      newborn_pruning_stages: 4
      prune_grow_cycle: 4.0
      adapt_to_ff_sparsity: False
      boosting_k: 0.5
  TM:
    _type_: block.tm.general_feedback
    active_cells_sds: ???
    predicted_cells_sds: ???
    tm:
      seed: ???
      cells_per_column: 12
      activation_threshold_basal: .9
      learning_threshold_basal: .7
      activation_threshold_apical: 1
      learning_threshold_apical: 1
      max_synapses_per_segment_basal: 2.1
      max_segments_per_cell_basal: 16
  AA:
    _type_: block.tm.general_feedback
    active_cells_sds: ???
    predicted_cells_sds: ???
    tm:
      seed: ???
      cells_per_column: 1
      activation_threshold_basal: .8
      learning_threshold_basal: .6
      activation_threshold_apical: 1
      learning_threshold_apical: 1
      max_synapses_per_segment_basal: 4.4
      max_segments_per_cell_basal: 32

stats_and_metrics:
  mae_normalization: no
  symmetrical_similarity: False
  distribution_metrics: pmf
  online_similarity_decay: 1.
  pmf_decay: 1.
  loss_normalization: False
  loss_layer_discount: 0.75

iterate_setups:
  simple: ...

temporal_memory:
  default_general_feedback:
    _type_: block.tm.general_feedback
